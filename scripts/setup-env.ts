#!/usr/bin/env tsx

/**
 * Environment Variables Setup Helper
 * 
 * This script helps users set up environment variables for local development.
 * It creates a .env file with the necessary variables for the project.
 */

import { createInterface } from 'readline';
import * as fs from 'fs';

const rl = createInterface({
  input: process.stdin,
  output: process.stdout,
});

function log(message: string, level: 'info' | 'success' | 'error' | 'warn' = 'info'): void {
  const colors = {
    info: '\x1b[36m',
    success: '\x1b[32m',
    error: '\x1b[31m',
    warn: '\x1b[33m'
  };
  const reset = '\x1b[0m';
  const prefix = level === 'success' ? '‚úÖ' : level === 'error' ? '‚ùå' : level === 'warn' ? '‚ö†Ô∏è' : '‚ÑπÔ∏è';
  console.log(`${colors[level]}${prefix} ${message}${reset}`);
}

function prompt(question: string): Promise<string> {
  return new Promise((resolve) => {
    rl.question(question, resolve);
  });
}

function header(title: string): void {
  console.log('\n' + '='.repeat(50));
  console.log(`üîß ${title}`);
  console.log('='.repeat(50));
}

async function setupEnvironmentFile(): Promise<void> {
  header('Environment Variables Setup');
  
  console.log(`
This script will help you create a .env file for local development.
The .env file stores your API keys and configuration locally.

Note: The .env file will not be committed to git (it's in .gitignore).
  `);
  
  const envVars: Record<string, string> = {};
  
  // Check for AI features
  const enableAI = await prompt('Enable AI features? (y/n): ');
  
  if (enableAI.toLowerCase() === 'y' || enableAI.toLowerCase() === 'yes') {
    console.log(`
To use AI features, you need an Anthropic API key:
1. Visit https://console.anthropic.com
2. Create an account or sign in
3. Generate an API key (starts with "sk-ant-")
    `);
    
    const apiKey = await prompt('Enter your Anthropic API key (or press Enter to skip): ');
    
    if (apiKey.trim()) {
      if (apiKey.startsWith('sk-ant-')) {
        envVars.ANTHROPIC_API_KEY = apiKey.trim();
        log('Anthropic API key added', 'success');
      } else {
        log('Warning: API key should start with "sk-ant-"', 'warn');
        envVars.ANTHROPIC_API_KEY = apiKey.trim();
      }
    }
  }
  
  // Check for Google Analytics
  const enableGA = await prompt('Enable Google Analytics? (y/n): ');
  
  if (enableGA.toLowerCase() === 'y' || enableGA.toLowerCase() === 'yes') {
    console.log(`
To use Google Analytics:
1. Visit https://analytics.google.com
2. Create a GA4 property
3. Get your Measurement ID (starts with "G-")
    `);
    
    const gaId = await prompt('Enter your Google Analytics Measurement ID (or press Enter to skip): ');
    
    if (gaId.trim()) {
      if (gaId.startsWith('G-')) {
        envVars.VITE_GA_MEASUREMENT_ID = gaId.trim();
        log('Google Analytics ID added', 'success');
      } else {
        log('Warning: Measurement ID should start with "G-"', 'warn');
        envVars.VITE_GA_MEASUREMENT_ID = gaId.trim();
      }
    }
  }
  
  // Add Node environment
  envVars.NODE_ENV = 'development';
  
  // Generate .env file
  if (Object.keys(envVars).length > 0) {
    const envContent = Object.entries(envVars)
      .map(([key, value]) => `${key}=${value}`)
      .join('\n');
    
    const envFileContent = `# Environment variables for local development
# Generated by setup-env.ts
# 
# This file is ignored by git and contains your local API keys.
# Do not share this file or commit it to version control.

${envContent}
`;
    
    fs.writeFileSync('.env', envFileContent, 'utf8');
    log('Created .env file successfully', 'success');
    
    console.log(`
‚úÖ Environment setup complete!

Created .env file with:
${Object.keys(envVars).map(key => `  ‚Ä¢ ${key}`).join('\n')}

Next steps:
1. Run: npm run dev
2. Visit: http://localhost:5000
3. Test your configuration

For deployment, add these same values as repository secrets in GitHub.
    `);
  } else {
    log('No environment variables configured', 'info');
    console.log('You can run this script again anytime to add API keys.');
  }
}

async function main(): Promise<void> {
  try {
    await setupEnvironmentFile();
  } catch (error) {
    log(`Setup failed: ${error instanceof Error ? error.message : String(error)}`, 'error');
    process.exit(1);
  } finally {
    rl.close();
  }
}

if (import.meta.url === `file://${process.argv[1]}`) {
  main().catch(console.error);
}